"use strict";(self.webpackChunkfhenix_docs=self.webpackChunkfhenix_docs||[]).push([[9061],{5678:(e,s,d)=>{d.r(s),d.d(s,{assets:()=>a,contentTitle:()=>i,default:()=>o,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var r=d(5893),n=d(1151);const t={},i="eAddress",l={id:"devdocs/Solidity API/Experimental/eAddress",title:"eAddress",description:"_A representation of an encrypted address using Fully Homomorphic Encryption.",source:"@site/docs/devdocs/Solidity API/Experimental/eAddress.md",sourceDirName:"devdocs/Solidity API/Experimental",slug:"/devdocs/Solidity API/Experimental/eAddress",permalink:"/docs/devdocs/Solidity API/Experimental/eAddress",draft:!1,unlisted:!1,editUrl:"https://github.com/fhenixprotocol/fhenix-docs/tree/main/docs/devdocs/Solidity API/Experimental/eAddress.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"IFHERC20",permalink:"/docs/devdocs/Solidity API/Experimental/IFHERC20"},next:{title:"FHE.sol",permalink:"/docs/devdocs/Solidity API/FHE"}},a={},c=[{value:"ConfAddress",id:"confaddress",level:2},{value:"toEaddress",id:"toeaddress",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return Values",id:"return-values",level:4},{value:"unsafeToAddress",id:"unsafetoaddress",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Values",id:"return-values-1",level:4},{value:"resestEaddress",id:"resesteaddress",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"equals",id:"equals",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Return Values",id:"return-values-2",level:4},{value:"conditionalUpdate",id:"conditionalupdate",level:3}];function h(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"eaddress",children:"eAddress"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.em,{children:["A representation of an encrypted address using Fully Homomorphic Encryption.\nIt consists of 5 encrypted 32-bit unsigned integers (",(0,r.jsx)(s.code,{children:"euint32"}),")."]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"struct Eaddress {\n  euint32[5] values;\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"confaddress",children:"ConfAddress"}),"\n",(0,r.jsx)(s.h3,{id:"toeaddress",children:"toEaddress"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function toEaddress(address addr) internal pure returns (struct Eaddress)\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Encrypts a plaintext Ethereum address into its encrypted representation (",(0,r.jsx)(s.code,{children:"eaddress"}),")."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.em,{children:["Iterates over 5 chunks of the address, applying a bitmask to each, then encrypting with ",(0,r.jsx)(s.code,{children:"FHE"}),"."]})}),"\n",(0,r.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"addr"}),(0,r.jsx)(s.td,{children:"address"}),(0,r.jsx)(s.td,{children:"The plain Ethereum address to encrypt"})]})})]}),"\n",(0,r.jsx)(s.h4,{id:"return-values",children:"Return Values"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"[0]"}),(0,r.jsx)(s.td,{children:"struct Eaddress"}),(0,r.jsx)(s.td,{children:"eaddr The encrypted representation of the address"})]})})]}),"\n",(0,r.jsx)(s.h3,{id:"unsafetoaddress",children:"unsafeToAddress"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function unsafeToAddress(struct Eaddress eaddr) internal pure returns (address)\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Decrypts an ",(0,r.jsx)(s.code,{children:"eaddress"})," to retrieve the original plaintext Ethereum address."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"This operation should be used with caution as it exposes the encrypted address."})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"eaddr"}),(0,r.jsx)(s.td,{children:"struct Eaddress"}),(0,r.jsx)(s.td,{children:"The encrypted address to decrypt"})]})})]}),"\n",(0,r.jsx)(s.h4,{id:"return-values-1",children:"Return Values"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"[0]"}),(0,r.jsx)(s.td,{children:"address"}),(0,r.jsx)(s.td,{children:"The decrypted plaintext Ethereum address"})]})})]}),"\n",(0,r.jsx)(s.h3,{id:"resesteaddress",children:"resestEaddress"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function resestEaddress(struct Eaddress eaddr, euint32 ezero) internal pure\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Re-encrypts the encrypted values within an ",(0,r.jsx)(s.code,{children:"eaddress"}),"."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"The re-encryption is done to change the encrypted representation without\naltering the underlying plaintext address, which can be useful for obfuscation purposes in storage."})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"eaddr"}),(0,r.jsx)(s.td,{children:"struct Eaddress"}),(0,r.jsx)(s.td,{children:"The encrypted address to re-encrypt"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"ezero"}),(0,r.jsx)(s.td,{children:"euint32"}),(0,r.jsx)(s.td,{children:"An encrypted zero value that triggers the re-encryption"})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"equals",children:"equals"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function equals(struct Eaddress lhs, address payable addr) internal view returns (ebool)\n"})}),"\n",(0,r.jsx)(s.p,{children:"Determines if an encrypted address is equal to a given plaintext Ethereum address."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"This operation encrypts the plaintext address and compares the encrypted representations."})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"lhs"}),(0,r.jsx)(s.td,{children:"struct Eaddress"}),(0,r.jsx)(s.td,{children:"The encrypted address to compare"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"addr"}),(0,r.jsx)(s.td,{children:"address payable"}),(0,r.jsx)(s.td,{children:"The plaintext Ethereum address to compare against"})]})]})]}),"\n",(0,r.jsx)(s.h4,{id:"return-values-2",children:"Return Values"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"[0]"}),(0,r.jsx)(s.td,{children:"ebool"}),(0,r.jsx)(s.td,{children:"res A boolean indicating if the encrypted and plaintext addresses are equal"})]})})]}),"\n",(0,r.jsx)(s.h3,{id:"conditionalupdate",children:"conditionalUpdate"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-solidity",children:"function conditionalUpdate(ebool condition, struct Eaddress eaddr, struct Eaddress newEaddr) internal pure returns (struct Eaddress)\n"})})]})}function o(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,s,d)=>{d.d(s,{Z:()=>l,a:()=>i});var r=d(7294);const n={},t=r.createContext(n);function i(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);