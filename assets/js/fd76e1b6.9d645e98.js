"use strict";(self.webpackChunkfhenix_docs=self.webpackChunkfhenix_docs||[]).push([[8284],{7891:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=t(4848),r=t(8453);const a={sidebar_position:6},s="Testing on Fhenix",o={id:"devdocs/Tutorials/Basic/Testing",title:"Testing on Fhenix",description:"During this phase, we will focus on deploying the contract, wrapping tokens, and executing transactions using the FhenixJS library and Hardhat.",source:"@site/versioned_docs/version-Helium/devdocs/Tutorials/Basic/Testing.md",sourceDirName:"devdocs/Tutorials/Basic",slug:"/devdocs/Tutorials/Basic/Testing",permalink:"/docs/helium/devdocs/Tutorials/Basic/Testing",draft:!1,unlisted:!1,editUrl:"https://github.com/fhenixprotocol/fhenix-docs/tree/main/versioned_docs/version-Helium/devdocs/Tutorials/Basic/Testing.md",tags:[],version:"Helium",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Deploying",permalink:"/docs/helium/devdocs/Tutorials/Basic/Deploying"},next:{title:"FHERC20",permalink:"/docs/helium/devdocs/Solidity API/Experimental/FHERC20"}},c={},l=[{value:"Step-by-Step Guide",id:"step-by-step-guide",level:2},{value:"1. Set Up the Test Environment",id:"1-set-up-the-test-environment",level:3},{value:"2. Test Contract Deployment",id:"2-test-contract-deployment",level:3},{value:"3. Wrap Tokens",id:"3-wrap-tokens",level:3},{value:"4. Execute Transaction",id:"4-execute-transaction",level:3},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"testing-on-fhenix",children:"Testing on Fhenix"}),"\n",(0,i.jsx)(n.p,{children:"During this phase, we will focus on deploying the contract, wrapping tokens, and executing transactions using the FhenixJS library and Hardhat."}),"\n",(0,i.jsx)(n.p,{children:"FhenixJS is injected by the Fhenix Hardhat plugin and can be used automatically by tests."}),"\n",(0,i.jsx)(n.p,{children:"We will break down each step, providing code snippets and explanations to ensure you understand how to test the contract effectively."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This section describes testing in a Hardhat project. For instructions on testing with Foundry, check ",(0,i.jsx)(n.a,{href:"/docs/helium/devdocs/Setting%20Up%20Your%20Environment/Foundry#writing-tests",children:"this"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-guide",children:"Step-by-Step Guide"}),"\n",(0,i.jsx)(n.h3,{id:"1-set-up-the-test-environment",children:"1. Set Up the Test Environment"}),"\n",(0,i.jsx)(n.p,{children:"First, import the necessary modules and define the initial variables."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { WrappingERC20 } from "../types/contracts/WrappingERC20";\nimport hre, { ethers } from \'hardhat\';\nimport { Permit } from "fhenixjs";\n\ndescribe(\'Test WERC20\', () =>  {\n  let contractAddr: string;\n  let contract: WrappingERC20;\n  let permit: Permit;\n  let owner: string;\n  let destination: string = "0x1245dD4AdB920c460773a105e1B3345707B4834A";\n\n  const amountToSend = BigInt(1);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-test-contract-deployment",children:"2. Test Contract Deployment"}),"\n",(0,i.jsxs)(n.p,{children:["In this phase, we will deploy the ",(0,i.jsx)(n.code,{children:"WrappingERC20"})," contract and initialize the permit using FhenixJS."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'  it(`Test Contract Deployment`, async () => {\n    const { ethers, fhenixjs } = hre;\n    const { deploy } = hre.deployments;\n    const [signer] = await ethers.getSigners();\n\n    // Set the owner to the signer\'s address\n    owner = signer.address;\n\n    // Deploy the WrappingERC20 contract\n    const token = await deploy("WrappingERC20", {\n      from: signer.address,\n      args: ["Test Token", "TST"],\n      log: true,\n      skipIfAlreadyDeployed: false,\n    });\n\n    // Get the deployed contract address\n    contractAddr = token.address;\n\n    // Generate the permit using FhenixJS\n    permit = await fhenixjs.generatePermit(contractAddr, undefined, signer);\n    contract = (await ethers.getContractAt("WrappingERC20", contractAddr)) as unknown as WrappingERC20;\n\n    console.log(`contractAddr: `, contractAddr);\n  });\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"FhenixJS Injection:"})," The ",(0,i.jsx)(n.code,{children:"fhenixjs"})," object is automatically available through Hardhat's runtime environment (",(0,i.jsx)(n.code,{children:"hre"}),"). This means you don't need to explicitly import or initialize it."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Permit Generation:"})," The ",(0,i.jsx)(n.code,{children:"generatePermit"})," function from FhenixJS is used to create a permit for interacting with the contract. This permit is essential for performing private operations on the contract, such as viewing encrypted balances."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-wrap-tokens",children:"3. Wrap Tokens"}),"\n",(0,i.jsx)(n.p,{children:"Now, we will test the wrapping functionality of the contract."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"  it(`Wrap Tokens`, async () => {\n    // Get the balance before wrapping\n    let balanceBefore = await contract.balanceOf(owner);\n    let privateBalanceBefore = await contract.getBalanceEncrypted(permit);\n    console.log(`Public Balance before wrapping: ${balanceBefore}`);\n    console.log(`Private Balance before wrapping: ${privateBalanceBefore}`);\n\n    // Wrap the tokens\n    await contract.wrap(amountToSend);\n\n    // Get the balance after wrapping\n    let balanceAfter = await contract.balanceOf(owner);\n    let privateBalanceAfter = await contract.getBalanceEncrypted(permit);\n    console.log(`Public Balance after wrapping: ${balanceAfter.toString()}`);\n    console.log(`Private Balance after wrapping: ${privateBalanceAfter.toString()}`);\n  });\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Public and Private Balances:"})," Before wrapping tokens, we check both the public balance (visible on the blockchain) and the private balance (encrypted and only visible with the permit)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wrapping Tokens:"})," The ",(0,i.jsx)(n.code,{children:"wrap"})," function is called on the contract to wrap the specified amount of tokens."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encrypted Balances:"})," After wrapping, we again check both balances to ensure the wrapping process worked as expected."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-execute-transaction",children:"4. Execute Transaction"}),"\n",(0,i.jsx)(n.p,{children:"Finally, we will test the transaction execution using encrypted amounts."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"  it(`Execute Transaction`, async () => {\n    // Get the private balance before sending\n    let privateBalanceBefore = await contract.getBalanceEncrypted(permit);\n    console.log(`Private Balance before sending: ${privateBalanceBefore}`);\n\n    // Encrypt the amount to send\n    const encrypted = await hre.fhenixjs.encrypt_uint32(Number(amountToSend));\n\n    // Transfer the encrypted amount\n    await contract.transferEncrypted(destination, encrypted);\n\n    // Get the private balance after sending\n    let privateBalanceAfter = await contract.getBalanceEncrypted(permit);\n    console.log(`Private Balance after sending: ${privateBalanceAfter}`);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Private Balance Check:"})," Before sending tokens, we check the private balance to verify the initial state."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encryption:"})," The amount to send is encrypted using the ",(0,i.jsx)(n.code,{children:"encrypt_uint32"})," function from FhenixJS. This ensures that the amount is securely transmitted."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encrypted Transfer:"})," The ",(0,i.jsx)(n.code,{children:"transferEncrypted"})," function is called on the contract to transfer the encrypted amount to the destination address."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Balance Verification:"})," After the transfer, we check the private balance again to confirm the transaction."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"This guide provided a step-by-step explanation of how to test a contract on Fhenix using Hardhat. By following these steps, you should be able to deploy a contract, wrap tokens, and execute transactions using the FhenixJS library. FhenixJS simplifies handling encrypted operations and permits, making it easier to integrate privacy features into your smart contracts."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);