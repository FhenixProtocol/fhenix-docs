"use strict";(self.webpackChunkfhenix_docs=self.webpackChunkfhenix_docs||[]).push([[6950],{5780:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var t=n(5893),s=n(1151);const i={sidebar_position:99,title:"Comparisons and Booleans",description:"Comparisons on FHE data"},r="Comparisons and Booleans",a={id:"devdocs/Writing Smart Contracts/booleans",title:"Comparisons and Booleans",description:"Comparisons on FHE data",source:"@site/docs/devdocs/Writing Smart Contracts/booleans.md",sourceDirName:"devdocs/Writing Smart Contracts",slug:"/devdocs/Writing Smart Contracts/booleans",permalink:"/fhenix-docs/docs/devdocs/Writing Smart Contracts/booleans",draft:!1,unlisted:!1,editUrl:"https://github.com/fhenixprotocol/fhenix-docs/main/docs/devdocs/Writing Smart Contracts/booleans.md",tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_position:99,title:"Comparisons and Booleans",description:"Comparisons on FHE data"},sidebar:"docsSidebar",previous:{title:"Type Conversions",permalink:"/fhenix-docs/docs/devdocs/Writing Smart Contracts/Converting-between-Types"},next:{title:"Types and Operations",permalink:"/fhenix-docs/docs/devdocs/Writing Smart Contracts/Types-and-Operators"}},c={},d=[{value:"Comparisons",id:"comparisons",level:2},{value:"ebool",id:"ebool",level:2}];function l(e){const o={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"comparisons-and-booleans",children:"Comparisons and Booleans"}),"\n",(0,t.jsx)(o.h2,{id:"comparisons",children:"Comparisons"}),"\n",(0,t.jsxs)(o.p,{children:["Unlike other operations in FHE.sol, comparison operations do not support their respective operators (e.g. ",(0,t.jsx)(o.code,{children:">"}),", ",(0,t.jsx)(o.code,{children:"<"})," etc.).\nThis is because solidity expects these operators to return a boolean value, which is not possible with FHE. Intuitively, this is because returning a boolean value would leak information about the encrypted data."]}),"\n",(0,t.jsxs)(o.p,{children:["Instead, comparison operations are implemented as functions that return an ",(0,t.jsx)(o.code,{children:"ebool"})," type."]}),"\n",(0,t.jsxs)(o.blockquote,{children:["\n",(0,t.jsxs)(o.p,{children:["Note: The ",(0,t.jsx)(o.code,{children:"ebool"})," type is not a real boolean type. It is implemented as a ",(0,t.jsx)(o.code,{children:"euint8"})]}),"\n"]}),"\n",(0,t.jsx)(o.h2,{id:"ebool",children:"ebool"}),"\n",(0,t.jsx)(o.p,{children:"Not sure what we want to say here yet."})]})}function p(e={}){const{wrapper:o}={...(0,s.a)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,o,n)=>{n.d(o,{Z:()=>a,a:()=>r});var t=n(7294);const s={},i=t.createContext(s);function r(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);