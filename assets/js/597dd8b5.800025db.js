"use strict";(self.webpackChunkfhenix_docs=self.webpackChunkfhenix_docs||[]).push([[8375],{194:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=n(4848),a=n(8453);const i={sidebar_position:3,title:"\ud83d\udc48 Outputs",description:"Sealing & Decryption - how data from a contract is returned"},s="Sealing and Decrypting",o={id:"devdocs/Writing Smart Contracts/Returning-Data",title:"\ud83d\udc48 Outputs",description:"Sealing & Decryption - how data from a contract is returned",source:"@site/docs/devdocs/Writing Smart Contracts/Returning-Data.md",sourceDirName:"devdocs/Writing Smart Contracts",slug:"/devdocs/Writing Smart Contracts/Returning-Data",permalink:"/docs/devdocs/Writing Smart Contracts/Returning-Data",draft:!1,unlisted:!1,editUrl:"https://github.com/fhenixprotocol/fhenix-docs/tree/main/docs/devdocs/Writing Smart Contracts/Returning-Data.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"\ud83d\udc48 Outputs",description:"Sealing & Decryption - how data from a contract is returned"},sidebar:"docsSidebar",previous:{title:"\ud83d\udc49 Inputs",permalink:"/docs/devdocs/Writing Smart Contracts/User-Inputs"},next:{title:"\ud83c\udf34 Select vs If...else",permalink:"/docs/devdocs/Writing Smart Contracts/Select"}},c={},d=[{value:"Sealed Data Format",id:"sealed-data-format",level:2},{value:"Metamask Compatability",id:"metamask-compatability",level:3},{value:"Examples",id:"examples",level:2},{value:"Sealed Box Encryption",id:"sealed-box-encryption",level:3},{value:"Decryption",id:"decryption",level:3},{value:"Metamask Unsealing",id:"metamask-unsealing",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"sealing-and-decrypting",children:"Sealing and Decrypting"}),"\n",(0,r.jsx)(t.p,{children:"When an application reads encrypted data from a Fhenix smart contract, that data must first be converted from its encrypted on-chain form to an encrypted form that the application can read and the user can decrypt."}),"\n",(0,r.jsx)(t.p,{children:"There are two ways to return encrypted data to the user:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Sealed Box Encryption"})}),"\n",(0,r.jsxs)(t.p,{children:["The data is returned to the user using ",(0,r.jsx)(t.a,{href:"https://bitbeans.gitbooks.io/libsodium-net/content/public-key_cryptography/sealed_boxes.html",children:"sealed box encryption"})," from NaCL. The gist of it is that the user provides a public key to the contract during a view function call, which the contract then uses to encrypt the data in such a way that only the owner of the private key associated with the provided public key can decrypt and read the data."]}),"\n",(0,r.jsxs)(t.p,{children:["From a contract perspective, this is done by using the ",(0,r.jsx)(t.code,{children:"FHE.sealoutput"})," (or ",(0,r.jsx)(t.code,{children:".seal"}),") function, which takes the data to be sealed and the public key of the user, and returns an encrypted blob."]}),"\n",(0,r.jsxs)(t.p,{children:["The encrypted data is then stored in a JSON structure, which is described in a ",(0,r.jsx)(t.a,{href:"#metamask-compatability",children:"later section"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"This data can then be decrypted using fhenix.js, manually by using the caller's private key or using Metamask or compatible APIs."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Standard Decryption"})}),"\n",(0,r.jsxs)(t.p,{children:["Alternatively, Fhenix supports standard decryption as well. If some data needs to be decrypted for public access, that can be done as well and a plaintext value is returned to the caller.\nThis can be done using the ",(0,r.jsx)(t.code,{children:"FHE.decrypt"})," function."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"sealed-data-format",children:"Sealed Data Format"}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["If using ",(0,r.jsx)(t.code,{children:"fhenixjs"}),", parsing the raw sealed data that is returned from sealoutput or seal is unnecessary."]})}),"\n",(0,r.jsxs)(t.p,{children:["The following JSON structure shows the components of the encrypted data returned by the ",(0,r.jsx)(t.code,{children:"seal"})," function:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "version": "x25519-xsalsa20-poly1305",\n  "nonce": "<base64 bytes of a nonce used for encrypted>",\n  "ephemPublicKey": "<base64 bytes of the target public key>",\n  "ciphertext": "<base64 string of a big-endian number>"\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"metamask-compatability",children:"Metamask Compatability"}),"\n",(0,r.jsx)(t.p,{children:"The encryption schema and structure matches the one used by Metamask's eth_decrypt function.\nThis means that we can consume sealed data directly from Metamask, which provides a more engaging experience for a dApp user."}),"\n",(0,r.jsxs)(t.p,{children:["Fetch an address's public key using the ",(0,r.jsx)(t.code,{children:"eth_getEncryptionPublicKey"})," method, seal the data for that specific public key (either as a permit or by using the public key directly), and then use Metamask's ",(0,r.jsx)(t.code,{children:"eth_decrypt"})," call to provide a guided decryption experience."]}),"\n",(0,r.jsx)(t.admonition,{title:"Warning",type:"danger",children:(0,r.jsxs)(t.p,{children:["Metamask's ",(0,r.jsx)(t.code,{children:"eth_getEncryptionPublicKey"})," and ",(0,r.jsx)(t.code,{children:"eth_decrypt"})," methods are deprecated. We provide these examples to demonstrate compatibility with native wallet encryption/decryption procedures. We aim to maintain compatibility as new standards emerge for encryption on Ethereum."]})}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.h3,{id:"sealed-box-encryption",children:"Sealed Box Encryption"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-solidity",children:'import {FHE} from "@fhenixprotocol/contracts";\n\nfunction sealoutputExample(bytes32 pubkey) public pure returns (bytes memory reencrypted) {\n    euint8 memory foo = asEuint8(100);\n    return foo.seal(pubkey);\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"decryption",children:"Decryption"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-Javascript",children:'import {FHE} from "@fhenixprotocol/contracts";\n\nfunction sealoutputExample() public pure returns (uint8 decrypted) {\n    euint8 memory foo = asEuint8(100);\n    return FHE.decrypt(foo);\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"metamask-unsealing",children:"Metamask Unsealing"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-Javascript",children:"async getPub() {\n    const provider = new BrowserProvider(window.ethereum);\n    const client = new FhenixClient({provider});\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    const keyResult = await provider.send('eth_getEncryptionPublicKey',[accounts[0]]);\n    const pk = `0x${this.base64ToHex(keyResult)}`;\n    this.showNotification(pk);\n}\nasync unseal() {\n    const provider = new BrowserProvider(window.ethereum);\n    const client = new FhenixClient({provider});\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    const result = await provider.send('eth_decrypt', [this.sealedInput, accounts[0]]);\n    const plaintext = this.toString(result);\n    this.showNotification(`Unsealed result: ${plaintext}`);\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Taken from the ",(0,r.jsx)(t.a,{href:"https://github.com/FhenixProtocol/fhenix-enc-tool/blob/master/src/App.vue",children:"encryption & unsealing tool"})]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);