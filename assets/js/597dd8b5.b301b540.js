"use strict";(self.webpackChunkfhenix_docs=self.webpackChunkfhenix_docs||[]).push([[2523],{665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=n(5893),o=n(1151);const s={sidebar_position:3,title:"\ud83d\udc48 Outputs",description:"Sealing & Decryption - how data from a contract is returned"},a="Decryption & Sealing",i={id:"devdocs/Writing Smart Contracts/Returning-Data",title:"\ud83d\udc48 Outputs",description:"Sealing & Decryption - how data from a contract is returned",source:"@site/docs/devdocs/Writing Smart Contracts/Returning-Data.md",sourceDirName:"devdocs/Writing Smart Contracts",slug:"/devdocs/Writing Smart Contracts/Returning-Data",permalink:"/fhenix-docs/docs/devdocs/Writing Smart Contracts/Returning-Data",draft:!1,unlisted:!1,editUrl:"https://github.com/fhenixprotocol/fhenix-docs/main/docs/devdocs/Writing Smart Contracts/Returning-Data.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"\ud83d\udc48 Outputs",description:"Sealing & Decryption - how data from a contract is returned"},sidebar:"docsSidebar",previous:{title:"\ud83d\udc49 Inputs",permalink:"/fhenix-docs/docs/devdocs/Writing Smart Contracts/User-Inputs"},next:{title:"\ud83c\udf34 Select vs If...else",permalink:"/fhenix-docs/docs/devdocs/Writing Smart Contracts/Select"}},c={},d=[{value:"Examples",id:"examples",level:2},{value:"Sealed Box Encryption",id:"sealed-box-encryption",level:3},{value:"Decryption",id:"decryption",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"decryption--sealing",children:"Decryption & Sealing"}),"\n",(0,r.jsx)(t.p,{children:"When an app wants to read some piece of encrypted data from a Fhenix smart contract, that data must be converted from its encrypted form on chain to an encryption that the app can read and the user can decrypt."}),"\n",(0,r.jsx)(t.p,{children:"There are two ways to return encrypted data to the user:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Sealed Box Encryption"})}),"\n",(0,r.jsxs)(t.p,{children:["The data is returned to the user using ",(0,r.jsx)(t.a,{href:"https://bitbeans.gitbooks.io/libsodium-net/content/public-key_cryptography/sealed_boxes.html",children:"sealed box encryption"})," from NaCL. The gist of it is that the user provides a public key to the contract during a view function call, which the contract then uses to encrypt the data in such a way that only the owner of the private key associated with the provided public key can decrypt and read the data."]}),"\n",(0,r.jsxs)(t.p,{children:["From a contract perspective, this is done by using the ",(0,r.jsx)(t.code,{children:"FHE.sealoutput"})," function, which takes the data to be sealed and the public key of the user, and returns an encrypted blob."]}),"\n",(0,r.jsx)(t.p,{children:"This data can then be decrypted using fhenix.js, or manually by using the caller's private key."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Standard Decryption"})}),"\n",(0,r.jsxs)(t.p,{children:["Alternatively, Fhenix supports standard decryption as well. If some data needs to be decrypted for public access, that can be done as well and a plaintext value is returned to the caller.\nThis can be done using the ",(0,r.jsx)(t.code,{children:"FHE.decrypt"})," function."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.h3,{id:"sealed-box-encryption",children:"Sealed Box Encryption"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-Javascript",children:'import {FHE} from "@fhenixprotocol/contracts";\n\nfunction sealoutputExample(bytes32 pubkey) public pure returns (bytes memory reencrypted) {\n    euint8 memory foo = asEuint8(100);\n    return FHE.sealoutput(foo, pubkey);\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"decryption",children:"Decryption"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-Javascript",children:'import {FHE} from "@fhenixprotocol/contracts";\n\nfunction sealoutputExample() public pure returns (uint8 decrypted) {\n    euint8 memory foo = asEuint8(100);\n    return FHE.decrypt(foo);\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["You can see full examples of how to use these functions in our ",(0,r.jsx)(t.a,{href:"/fhenix-docs/docs/devdocs/Examples%20and%20References/Examples-fheDapps",children:"examples and dApps"})," section."]})]})}function p(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var r=n(7294);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);