"use strict";(self.webpackChunkfhenix_docs=self.webpackChunkfhenix_docs||[]).push([[6717],{3851:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(4848),o=t(8453);const r={sidebar_position:7,title:"\ud83e\uddd9 Type Conversions",description:"Converting between different FHE types"},s="Converting Between Types",c={id:"devdocs/Writing Smart Contracts/Converting-between-Types",title:"\ud83e\uddd9 Type Conversions",description:"Converting between different FHE types",source:"@site/docs/devdocs/Writing Smart Contracts/Converting-between-Types.md",sourceDirName:"devdocs/Writing Smart Contracts",slug:"/devdocs/Writing Smart Contracts/Converting-between-Types",permalink:"/docs/nitrogen/devdocs/Writing Smart Contracts/Converting-between-Types",draft:!1,unlisted:!1,editUrl:"https://github.com/fhenixprotocol/fhenix-docs/tree/main/docs/devdocs/Writing Smart Contracts/Converting-between-Types.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"\ud83e\uddd9 Type Conversions",description:"Converting between different FHE types"},sidebar:"docsSidebar",previous:{title:"\ud83d\udd75\ufe0f Permissions",permalink:"/docs/nitrogen/devdocs/Writing Smart Contracts/Permissions"},next:{title:"\ud83e\udeb5 Console.log",permalink:"/docs/nitrogen/devdocs/Writing Smart Contracts/Debug-Logging"}},a={},l=[{value:"Using Conversion Functions",id:"using-conversion-functions",level:2},{value:"\u26a0\ufe0f Important Security Note",id:"warning-important-security-note",level:3},{value:"Final Tips\u200b",id:"final-tips",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"converting-between-types",children:"Converting Between Types"}),"\n",(0,i.jsxs)(e.p,{children:["Conversion between various encrypted types or from plaintext to encrypted within contracts is frequently required. This section covers procedures for leveraging type conversion functions in ",(0,i.jsx)(e.code,{children:"FHE.sol"})," to manipulate encrypted data effectively."]}),"\n",(0,i.jsx)(e.h2,{id:"using-conversion-functions",children:"Using Conversion Functions"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Converting Encrypted to Other Encrypted Types:"})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"The following code shows conversion of an encrypted Boolean vote to an encrypted integer before tallying in a voting smart contract."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Contract Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-Javascript",children:"contract Voting { \n    function convertVote(ebool encryptedVote) public {\n        // Convert the encrypted boolean vote to an encrypted 32-bit integer\n        euint32 encryptedVoteInt = encryptedVote.toU32();\n        // Further processing with encryptedVoteInt\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Converting from Plaintext to Encrypted Type:"})}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"The following code shows initializing an encrypted counter in a smart contract, starting from a plaintext value that needs to be encrypted."}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Contract Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-Javascript",children:"contract Counter {\n    euint32 private encryptedCount;\n\n    function initializeCount(uint256 initialCount) public {\n        // Convert a plaintext count to an encrypted count\n        encryptedCount = FHE.asEuint32(initialCount);\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"warning-important-security-note",children:["\u26a0\ufe0f"," Important Security Note"]}),"\n",(0,i.jsxs)(e.p,{children:["When converting from plaintext to encrypted (also called ",(0,i.jsx)(e.a,{href:"/docs/nitrogen/devdocs/Writing%20Smart%20Contracts/Useful-Tips#trivial-encryption",children:(0,i.jsx)(e.strong,{children:"Trivial Encryption"})}),", the value is still in plaintext and exposed to the contract, as well as on the public blockchain. This type of conversion should only be used when plaintext data is not sensitive, and it is safe to expose on a public blockchain."]}),"\n",(0,i.jsx)(e.h2,{id:"final-tips",children:"Final Tips\u200b"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Understand the Data Types"}),": Know the data types that you are working with and the implications of converting between them. Ensure that the conversion is logical and secure."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Monitor Gas Usage"}),": Be aware of the gas costs associated with specific types of conversions, especially when functions are frequently called."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Test Thoroughly"}),": Always test contracts with various scenarios to ensure that type conversions are behaving as expected."]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var i=t(6540);const o={},r=i.createContext(o);function s(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);